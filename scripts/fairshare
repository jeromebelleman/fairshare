#! /usr/bin/env python

import sys
from argparse import ArgumentParser, RawDescriptionHelpFormatter
import cx_Oracle
from datetime import datetime, timedelta
from time import mktime

COLS = { 'TIMESTAMP': 19,
         'PRIORITY': 10, # 9 + 1 for the comma
         'CPU': 13, # 12 + 1 for the comma
         'STARTED': 7,
         'WALL': 11,
       }

def connect(config):
    return cx_Oracle.connect(open(config).read().strip())

def find(args):
    # Connect to DB
    connection = connect(args.config)
    c = connection.cursor()

    # Query
    _, usernames = c.callproc('find', (args.user, c.var(cx_Oracle.CURSOR)))
    for username, in usernames:
        print username

def shares(args):
    # Connect to DB
    connection = connect(args.config)
    c = connection.cursor()

    # Query
    select = "SELECT timestamp, priority, started, cpu FROM shares"
    sub = " WHERE id = (SELECT id FROM users WHERE username = :u)"
    timestamp = " AND timestamp > :t ORDER BY timestamp"
    sql = select + sub + timestamp
    c.execute(sql, [args.group, datetime.now() - timedelta(hours=args.ago)])
    table(c, args.group, '    ')

    # Print user's group hierarchy share values
    if args.recursive:
        hierarchy = args.group.split('/')
        for i in range(1, len(hierarchy) - 1):
            group = '/'.join(hierarchy[:-i])
            c.execute(sql, [group])
            print
            table(c, group, '    ')

def table(cursor, group, indent=None):
    def header(cursor, indent):
        if indent:
            print indent,
        for c, _, _, _, _, _, _ in cursor.description:
            print c + ' ' * (COLS[c] - len(c) + 1),
        print

    # Print group name
    print group + ':\n'

    # Header
    header(cursor, indent)

    # Values
    for row in cursor:
        if indent:
            print indent,
        for col, (c, _, _, _, _, _, _) in zip(row, cursor.description):
            print str(col) + ' ' * (COLS[c] - len(str(col)) + 1),
        print

    # Footer
    header(cursor, indent)

def main():
    # Arguments
    p = ArgumentParser(description='Query fairshare information',
                       formatter_class=RawDescriptionHelpFormatter)
    p.add_argument('-c', '--config', help="config file",
                   default='/etc/fairshare')

    s = p.add_subparsers()

    # Find sub-command
    pfi = s.add_parser('find', help="find user's charged group")
    pfi.add_argument('user', help="user name")
    pfi.set_defaults(func=find)

    # Shares sub-command
    psh = s.add_parser('shares',
                       help="print user's charged group share values over time")
    psh.add_argument('group', help="charged group")
    help = "recursively print all user's parent groups share values too"
    psh.add_argument('-r', '--recursive', action='store_true', help=help)
    psh.add_argument('-a', '--ago', metavar='N', type=int, default=2,
                     help="display share values after N hours ago")
    psh.set_defaults(func=shares)

    args = p.parse_args()
    args.func(args)

if __name__ == '__main__':
    sys.exit(main())
